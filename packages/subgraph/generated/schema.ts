// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Tournament extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tournament entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Tournament must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Tournament", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Tournament | null {
    return changetype<Tournament | null>(store.get_in_block("Tournament", id));
  }

  static load(id: string): Tournament | null {
    return changetype<Tournament | null>(store.get("Tournament", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get initDate(): BigInt {
    let value = this.get("initDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set initDate(value: BigInt) {
    this.set("initDate", Value.fromBigInt(value));
  }

  get endDate(): BigInt {
    let value = this.get("endDate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endDate(value: BigInt) {
    this.set("endDate", Value.fromBigInt(value));
  }

  get deFiBridgeAddress(): Bytes {
    let value = this.get("deFiBridgeAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set deFiBridgeAddress(value: Bytes) {
    this.set("deFiBridgeAddress", Value.fromBytes(value));
  }

  get maxParticipants(): i32 {
    let value = this.get("maxParticipants");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set maxParticipants(value: i32) {
    this.set("maxParticipants", Value.fromI32(value));
  }

  get enrollmentAmount(): BigInt {
    let value = this.get("enrollmentAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set enrollmentAmount(value: BigInt) {
    this.set("enrollmentAmount", Value.fromBigInt(value));
  }

  get players(): TournamentPlayerLoader {
    return new TournamentPlayerLoader(
      "Tournament",
      this.get("id")!.toString(),
      "players",
    );
  }

  get results(): TournamentPlayerLoader {
    return new TournamentPlayerLoader(
      "Tournament",
      this.get("id")!.toString(),
      "results",
    );
  }

  get totalCollectedAmount(): BigInt {
    let value = this.get("totalCollectedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCollectedAmount(value: BigInt) {
    this.set("totalCollectedAmount", Value.fromBigInt(value));
  }

  get numParticipant(): i32 {
    let value = this.get("numParticipant");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set numParticipant(value: i32) {
    this.set("numParticipant", Value.fromI32(value));
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Player", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Player | null {
    return changetype<Player | null>(store.get_in_block("Player", id));
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tournaments(): TournamentPlayerLoader {
    return new TournamentPlayerLoader(
      "Player",
      this.get("id")!.toString(),
      "tournaments",
    );
  }
}

export class TournamentPlayer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TournamentPlayer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TournamentPlayer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TournamentPlayer", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TournamentPlayer | null {
    return changetype<TournamentPlayer | null>(
      store.get_in_block("TournamentPlayer", id),
    );
  }

  static load(id: string): TournamentPlayer | null {
    return changetype<TournamentPlayer | null>(
      store.get("TournamentPlayer", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tournamentID(): string {
    let value = this.get("tournamentID");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tournamentID(value: string) {
    this.set("tournamentID", Value.fromString(value));
  }

  get player(): string {
    let value = this.get("player");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set player(value: string) {
    this.set("player", Value.fromString(value));
  }

  get scoreNumber(): BigInt {
    let value = this.get("scoreNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set scoreNumber(value: BigInt) {
    this.set("scoreNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}

export class TournamentPlayerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TournamentPlayer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TournamentPlayer[]>(value);
  }
}
