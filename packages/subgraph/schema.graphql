type Tournament @entity(immutable: true) {
  id: ID! # use tournamentID
  initData: BigInt! # uint64
  endDate: BigInt! # uint64
  deFiBridgeAddress: Bytes! # address
  players: [TournamentPlayer!]! @derivedFrom(field: "tournament") # one tournament can have many players
  results: [TournamentPlayerResult!]! @derivedFrom(field: "tournament")
}

type TournamentPlayer @entity(immutable: true) {
  id: ID! #use TourID + player address
  tournament: Tournament!
  player: Players!
  numParticipants: Int! # uint16
  totalCollectedAmount: BigInt! # uint256
  blockTimestamp: BigInt!
  result: [TournamentPlayerResult!]! @derivedFrom(field: "player")
  tournaments: [TournamentPlayerResult!]! @derivedFrom(field: "tournament") # many players can have many tournaments
}

type Players @entity(immutable: true) {
  id: ID! # use EOA
  tournaments: [TournamentPlayer!]! @derivedFrom(field: "player")
}

type TournamentPlayerResult @entity(immutable: true) {
  id: ID! #use TourID + player address +  score
  tournament: Tournament! # uint16
  player: Players! # tourID + player
  scoreNumber: BigInt! # uint256
  blockTimestamp: BigInt!
}
