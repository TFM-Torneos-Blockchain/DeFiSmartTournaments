type Tournament @entity {
  id: ID! # uint16 tournamentID
  initDate: BigInt! # uint64
  endDate: BigInt! # uint64
  deFiBridgeAddress: Bytes! # address
  maxParticipants: Int! # get it from struct filtered by ID
  enrollmentAmount: BigInt! # get it from struct filtered by ID
  acceptedTokens: [Token!]!
  playersInfo: [TournamentPlayer!]! @derivedFrom(field: "tournamentID")
  totalCollectedAmount: BigInt!
  numParticipant: Int! # uint16
}

type Token @entity(immutable: true) {
  id: Bytes!
}

type Player @entity(immutable: true) {
  id: ID! # player address
  tournaments: [TournamentPlayer!]! @derivedFrom(field: "player")
}

type TournamentPlayer @entity {
  id: ID! # TourID + player address
  tournamentID: Tournament!
  player: Player! # player address
  scoreNumber: BigInt! # uint256
  blockTimestamp: BigInt!
}
