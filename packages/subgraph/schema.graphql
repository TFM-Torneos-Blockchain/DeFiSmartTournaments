type Tournament @entity(immutable: true) {
  tournamentID: tournamentID! #! mbe Int? uint16
  initData: BigInt! # uint64
  endDate: BigInt! # uint64
  deFiBridgeAddress: Bytes! # address
  players: [TournamentPlayerResult!]! @derivedFrom(field: "tournamentID") # one tournament can have many players
}

type TournamentPlayer @entity(immutable: true) {
  id: ID! #player address + TourID
  numParticipants: Int! # uint16
  totalCollectedAmount: BigInt! # uint256
  blockTimestamp: BigInt!
  result: [TournamentPlayerResult!]! @derivedFrom(field: "player")
  tournamentID: [TournamentPlayerResult!]! @derivedFrom(field: "tournamentID") # many players can have many tournaments
}

type TournamentPlayerResult @entity(immutable: true) {
  id: ID! #player address +  score
  tournamentID: Tournament! # uint16
  player: TournamentPlayer! # one result can have one user enrolled per tournament
  scoreNumber: BigInt! # uint256
  blockTimestamp: BigInt!
}
