import { expect } from "chai";
import { ethers } from "hardhat";
import { LeaderBoard } from "../typechain-types";

describe("LeaderBoard and MerkleTree", function () {
  // We define a fixture to reuse the same setup in every test.

  let leaderBoard: LeaderBoard;
  beforeEach("Deploy contracts", async () => {
    const [owner] = await ethers.getSigners();
    const LeaderBoardFactory = await ethers.getContractFactory("LeaderBoard");
    leaderBoard = (await LeaderBoardFactory.deploy()) as LeaderBoard;
    await leaderBoard.deployed();
    await leaderBoard.setResult(0, "0xc3d688B66703497DAA19211EEdff47f25384cdc3", 333);
    await leaderBoard.setResult(0, "0x11DfADcd62593325Bcf82Ed1f55d87840E93A977", 56565);
    await leaderBoard.setResult(0, "0x74a81F84268744a40FEBc48f8b812a1f188D80C3", 888);
    await leaderBoard.setResult(0, "0xc3d688B66703497DAA19211EEdff47f25384cdc3", 11);
    await leaderBoard.setResult(0, "0x11DfADcd62593325Bcf82Ed1f55d87840E93A977", 15);
  });

  // describe("Set result", function () {
  it("It should generate the same Sponge Hash as the one generated by the Backend.", async () => {
    const spongeHash = await leaderBoard.getSpongeHash(0);
    expect(spongeHash.toString()).to.equal("0x4fa4099516a67517bb23f9f8e824e8feff79fbefdc697146f5ce2eb775da56ce");
  });
  // });

  // describe("Create Leader Board and Merkle Root", function () {
  it("It should revert due to incorrect player classification ordering.", async () => {
    await expect(
      leaderBoard.createLeaderBoardMerkleTree(
        0,
        "0xc3d688b66703497daa19211eedff47f25384cdc3000000000000000000000000000000000000000000000000000000000000014d11dfadcd62593325bcf82ed1f55d87840e93a977000000000000000000000000000000000000000000000000000000000000dcf574a81f84268744a40febc48f8b812a1f188d80c30000000000000000000000000000000000000000000000000000000000000378c3d688b66703497daa19211eedff47f25384cdc3000000000000000000000000000000000000000000000000000000000000000b11dfadcd62593325bcf82ed1f55d87840e93a977000000000000000000000000000000000000000000000000000000000000000f",
        [1, 2, 4, 0, 3],
      ),
    ).to.be.revertedWith("Data corrupted: incorrect players classification.");
  });
  it("It should revert due to inequality in on-chain and off-chain Sponge Hash.", async () => {
    await expect(
      leaderBoard.createLeaderBoardMerkleTree(
        0,
        "0xc3f688b66703497daa19211eedff47f25384cdc3000000000000000000000000000000000000000000000000000000000000014d11dfadcd62593325bcf82ed1f55d87840e93a977000000000000000000000000000000000000000000000000000000000000dcf574a81f84268744a40febc48f8b812a1f188d80c30000000000000000000000000000000000000000000000000000000000000378c3d688b66703497daa19211eedff47f25384cdc3000000000000000000000000000000000000000000000000000000000000000b11dfadcd62593325bcf82ed1f55d87840e93a977000000000000000000000000000000000000000000000000000000000000000f",
        [1, 2, 0, 4, 3],
      ),
    ).to.be.revertedWith("Data corrupted: bad spongeHash recreation.");
  });

  it("It should generate the same Merkle Root as the one generated by the Backend.", async () => {
    await leaderBoard.createLeaderBoardMerkleTree(
      0,
      "0xc3d688b66703497daa19211eedff47f25384cdc3000000000000000000000000000000000000000000000000000000000000014d11dfadcd62593325bcf82ed1f55d87840e93a977000000000000000000000000000000000000000000000000000000000000dcf574a81f84268744a40febc48f8b812a1f188d80c30000000000000000000000000000000000000000000000000000000000000378c3d688b66703497daa19211eedff47f25384cdc3000000000000000000000000000000000000000000000000000000000000000b11dfadcd62593325bcf82ed1f55d87840e93a977000000000000000000000000000000000000000000000000000000000000000f",
      [1, 2, 0, 4, 3],
    );
    const merkleRoot = await leaderBoard.getMerkleRoot(0);
    expect(merkleRoot.toString()).to.equal("0x99d0bc281d4bd3be255fd5f256a1aed9becd33fb488e764f121b5cd3c25a4781");
  });
  // });
});
